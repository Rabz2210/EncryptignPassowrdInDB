package com.example.accessingdatamysql;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private  UserRepository userRepository;
  
  @Autowired
  private DBencryptor dbenccryptor;
  
  @Autowired 
  private uuIdGen idgen;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody User addNewUser (@RequestBody User testuser) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	 
    User n = new User();
    String id = idgen.getUUid();
    try {
		n.setId(dbenccryptor.Encrypt(id));
	} catch (Exception e) {
		e.printStackTrace();
	}
    n.setName(testuser.getName());
    n.setEmail(testuser.getEmail());
    n=userRepository.save(n);
    testuser.setId(id);
    return testuser;
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  
  @GetMapping(path="/find")
  public @ResponseBody Optional<User> findUser(@RequestParam String uuid) {
	  Optional<User> n = null;
	  try {
		  
		n=userRepository.findById(dbenccryptor.Encrypt(uuid));
		n.get().setId(dbenccryptor.Decrypt(n.get().getId()));
		
	} catch (Exception e) {
		
		e.printStackTrace();
	}
	  return n;
  }
}
